// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.2
// source: test.proto

package MyProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ViewClient is the client API for View service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ViewClient interface {
	Login(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ApplicationArray, error)
	Applications(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Succee, error)
}

type viewClient struct {
	cc grpc.ClientConnInterface
}

func NewViewClient(cc grpc.ClientConnInterface) ViewClient {
	return &viewClient{cc}
}

func (c *viewClient) Login(ctx context.Context, in *UserID, opts ...grpc.CallOption) (*ApplicationArray, error) {
	out := new(ApplicationArray)
	err := c.cc.Invoke(ctx, "/Business.View/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *viewClient) Applications(ctx context.Context, in *Application, opts ...grpc.CallOption) (*Succee, error) {
	out := new(Succee)
	err := c.cc.Invoke(ctx, "/Business.View/Applications", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ViewServer is the server API for View service.
// All implementations must embed UnimplementedViewServer
// for forward compatibility
type ViewServer interface {
	Login(context.Context, *UserID) (*ApplicationArray, error)
	Applications(context.Context, *Application) (*Succee, error)
	mustEmbedUnimplementedViewServer()
}

// UnimplementedViewServer must be embedded to have forward compatible implementations.
type UnimplementedViewServer struct {
}

func (UnimplementedViewServer) Login(context.Context, *UserID) (*ApplicationArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedViewServer) Applications(context.Context, *Application) (*Succee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Applications not implemented")
}
func (UnimplementedViewServer) mustEmbedUnimplementedViewServer() {}

// UnsafeViewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ViewServer will
// result in compilation errors.
type UnsafeViewServer interface {
	mustEmbedUnimplementedViewServer()
}

func RegisterViewServer(s grpc.ServiceRegistrar, srv ViewServer) {
	s.RegisterService(&View_ServiceDesc, srv)
}

func _View_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Business.View/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).Login(ctx, req.(*UserID))
	}
	return interceptor(ctx, in, info, handler)
}

func _View_Applications_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Application)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ViewServer).Applications(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Business.View/Applications",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ViewServer).Applications(ctx, req.(*Application))
	}
	return interceptor(ctx, in, info, handler)
}

// View_ServiceDesc is the grpc.ServiceDesc for View service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var View_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Business.View",
	HandlerType: (*ViewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _View_Login_Handler,
		},
		{
			MethodName: "Applications",
			Handler:    _View_Applications_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test.proto",
}
